import axios, { AxiosRequestConfig, AxiosInstance } from 'axios';

export default class AxiosClient {
  protected instance!: AxiosInstance;
  
  // eslint-disable-next-line class-methods-use-this
  public async request<T = any, E = any>(config: AxiosRequestConfig): Promise<any> {
    config.url = `/api${config.url}`;

    if(config.data && config.data === null) {
      config.data = {};
    }

    try {
      const { data }= await this.instance.request(config);
      return data;
    } catch (err) {
      const newError: any = new Error('failed request: ' + JSON.stringify(err.response.data));
      newError.data = err.response.data;

      throw newError;
    }
  }
}

{{#apiConfig.hasDescription}}
/**
{{#apiConfig.description}}
 * {{.}}
{{/apiConfig.description}}
 */
{{/apiConfig.hasDescription}}
export class Api extends AxiosClient{
  constructor(axios: AxiosInstance) {
    super();

    this.instance = axios;
  }

{{#routes}}

  {{#outOfModule}}


  /**
  {{#comments}}
   * {{.}}
  {{/comments}}
   */
  {{name}} = ({{#routeArgs}}{{name}}{{#optional}}?{{/optional}}: {{type}}, {{/routeArgs}}) =>
    this.request<{{returnType}}, {{errorReturnType}}>({...config, url: `{{path}}`, method: "{{method}}" {{#bodyArg}}, data: {{.}}{{/bodyArg}} {{#hasQuery}}, params: query{{/hasQuery}}}),
  {{/outOfModule}}

  {{#combined}}
  {{moduleName}} = {
    {{#routes}}


    /**
    {{#comments}}
     * {{.}}
    {{/comments}}
     */
    {{name}}: ({{#routeArgs}}{{name}}{{#optional}}?{{/optional}}: {{type}}, {{/routeArgs}}) =>
      this.request<{{returnType}}, {{errorReturnType}}>({...config, url: `{{path}}`, method: "{{method}}" {{#bodyArg}}, data: {{.}}{{/bodyArg}} {{#hasQuery}}, params: query{{/hasQuery}}}),
    {{/routes}}
  }
  {{/combined}}
{{/routes}}

}
